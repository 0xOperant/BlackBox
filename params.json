{"name":"BlackBox","tagline":"Raspbian + openVPN wifi travel router","body":"### Overview\r\nBelow is a list of hardware and software packages I used to create my \"black box.\"  The name is reference to the color-coded system many cryptographers use when referring to plain-text (red data) and encrypted text (black data).  The black box is basically an inline encryption device.  Once connected to the Internet, in a hotel or coffee shop for example, the black box automatically establishes an openVPN tunnel and serves up a WPA2 encrypted wifi hotspot.  Any client device connected to the hotspot is automatically routed through the openVPN tunnel, protecting all data transmissions from eavesdropping.  The tunnel itself is protected by mutual certificate-based authentication, as well as pre-shared TLS keys for packet signing (HMAC), preventing man-in-the-middle and DOS attacks.  This is especially useful during overseas travel.  Furthermore, iptables is used to prevent unwanted access to the device from the untrusted interface (connected to the Internet), or from the VPN tunnel.  Only established, related traffic is allowed.  \r\n\r\n### Concept\r\nI developed the black box after experiencing the disarray of openVPN clients on various platforms. Chromebook, for example, cannot use TLS preshared keys for HMAC signing.  Apple iOS devices drop their wifi connections, and therefore openVPN sessions, every time the screen locks.  Android openVPN clients have been buggy as well.  In contrast, the black box is very practical. You simply plug in the power supply and Ethernet cable, and the black box will automatically attempt to establish the openVPN tunnel.  If the tunnel is blocked by a captive portal, you will be prompted to authenticate to the captive portal by the first device you use to connect to the black box's secure wifi hotspot (both Android and iOS support this natively).  Once authenticated, the black box will then establish the openVPN tunnel. If an Ethernet cable is not available, use a second wifi dongle to connect to available public wifi instead.  This interface (wlan1) is then treated just like eth0, which is untrusted and only used to establish the openVPN tunnel. Connecting to public wifi via a second interface is a little more hackish, and will require you to ssh into the black box in order to configure the interface. This can be automated to some extent using wpa_supplicant. \r\n\r\n### Hardware\r\n* Raspberry Pi B+ (or newer)\r\n* Sturdy Pi case, preferably with screws (holds together better during travel)\r\n* 2 ralink chipset-based mini-wifi dongles (must support softAP mode)\r\n* 5v, 1 amp micro-usb power supply...can even be a battery!\r\n* MicroSD card, 8GB minimum, Class 10 preferred for better performance\r\n\r\n### Software\r\n* Raspbian (Debian 7.x-based, download latest image from official website)\r\n* openVPN\r\n* hostAPD (serves wifi hotspot)\r\n* dnsmasq (serves DHCP to clients)\r\n* wpa_supplicant (helps with roaming on wifi)\r\n* Optional\r\n* Iptables-persistent (makes saving iptables easier)\r\n* vim (less sadistic than vi)\r\n* fail2ban (protects sshd from DOS)\r\n\r\n### Coming Soon: How to build your own BlackBox!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}